import concurrent.futures
import sqlite3
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time
import random
import re

CHROMEDRIVER_PATH = r"C:\Users\Hi\rating_comic\crawl\chromedriver.exe"
DB_PATH = "manhuavn.db"

# H√†m t·∫°o b·∫£ng trong SQLite
def create_tables():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS stories (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        title TEXT,
                        link TEXT,
                        status TEXT,
                        followers TEXT,
                        views TEXT,
                        rating TEXT,
                        rating_count TEXT,
                        description TEXT,
                        chapters TEXT,
                        author TEXT
                    )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS comments (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        story_title TEXT,
                        user TEXT,
                        content TEXT,
                        FOREIGN KEY(story_title) REFERENCES stories(title)
                    )''')
    conn.commit()
    conn.close()

# H√†m ch√®n d·ªØ li·ªáu v√†o b·∫£ng stories
def insert_story(story):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO stories (title, link, status, followers, views, rating, rating_count, description, chapters, author)
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                   (story["T√™n truy·ªán"], story["Link truy·ªán"], story["T√¨nh tr·∫°ng"], story["L∆∞·ª£t theo d√µi"], story["L∆∞·ª£t xem"], 
                    story["ƒê√°nh gi√°"], story["L∆∞·ª£t ƒë√°nh gi√°"], story["M√¥ t·∫£"], story["S·ªë ch∆∞∆°ng"], story["T√°c gi·∫£"]))
    conn.commit()
    conn.close()

# H√†m ch√®n d·ªØ li·ªáu v√†o b·∫£ng comments
def insert_comments(comments):
    if not comments:
        return
        
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.executemany('''INSERT INTO comments (story_title, user, content)
                          VALUES (?, ?, ?)''',
                       [(comment["T√™n truy·ªán"], comment["Ng∆∞·ªùi b√¨nh lu·∫≠n"], comment["N·ªôi dung b√¨nh lu·∫≠n"]) for comment in comments])
    conn.commit()
    conn.close()

# H√†m l·∫•y d·ªØ li·ªáu an to√†n
def get_text_safe(element, selector):
    try:
        return element.find_element(By.CSS_SELECTOR, selector).text.strip()
    except:
        return "N/A"

# H√†m l·∫•y danh s√°ch truy·ªán
def get_all_stories():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    driver = webdriver.Chrome(service=Service(CHROMEDRIVER_PATH), options=chrome_options)
    
    stories = []
    page = 1

    while True:
        print(f"\nüìå ƒêang l·∫•y danh s√°ch truy·ªán - Trang {page}...")
        url = f"https://manhuavn.top/danhsach/P{page}/index.html?status=0&sort=2"
        driver.get(url)
        time.sleep(2)

        try:
            WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".lst_story .story_item")))
        except:
            print("‚ùå Kh√¥ng t√¨m th·∫•y truy·ªán! K·∫øt th√∫c.")
            break

        elems = driver.find_elements(By.CSS_SELECTOR, ".lst_story .story_item")
        if not elems:
            print("‚ùå Kh√¥ng c√≤n truy·ªán n√†o!")
            break

        for elem in elems:
            title = get_text_safe(elem, ".story_title")
            link = elem.find_element(By.CSS_SELECTOR, "a").get_attribute("href")
            stories.append({"T√™n truy·ªán": title, "Link truy·ªán": link})

        page += 1

    driver.quit()
    return stories

# H√ÄM 1: L·∫•y th√¥ng tin chi ti·∫øt c·ªßa truy·ªán
def get_story_qualitative_data(story):
    """
    L·∫•y th√¥ng tin chi ti·∫øt c·ªßa truy·ªán nh∆∞ t√¨nh tr·∫°ng, l∆∞·ª£t theo d√µi, l∆∞·ª£t xem, ƒë√°nh gi√°, m√¥ t·∫£, s·ªë ch∆∞∆°ng v√† t√°c gi·∫£.
    
    Args:
        story: Dictionary ch·ª©a th√¥ng tin c∆° b·∫£n c·ªßa truy·ªán (t√™n v√† link)
        
    Returns:
        Dictionary ch·ª©a th√¥ng tin chi ti·∫øt c·ªßa truy·ªán
    """
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    driver = webdriver.Chrome(service=Service(CHROMEDRIVER_PATH), options=chrome_options)

    story_data = story.copy()  # T·∫°o b·∫£n sao ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn d·ªØ li·ªáu g·ªëc
    
    try:
        print(f"ƒêang l·∫•y th√¥ng tin chi ti·∫øt cho truy·ªán: {story['T√™n truy·ªán']}")
        driver.get(story["Link truy·ªán"])
        time.sleep(2)

        # L·∫•y th√¥ng tin chi ti·∫øt
        story_data["T√¨nh tr·∫°ng"] = get_text_safe(driver, ".info-row .contiep")
        story_data["L∆∞·ª£t theo d√µi"] = get_text_safe(driver, "li.info-row strong")
        story_data["L∆∞·ª£t xem"] = get_text_safe(driver, "li.info-row view.colorblue")
        story_data["ƒê√°nh gi√°"] = get_text_safe(driver, 'span[itemprop="ratingValue"]')
        story_data["L∆∞·ª£t ƒë√°nh gi√°"] = get_text_safe(driver, 'span[itemprop="ratingCount"]')
        story_data["M√¥ t·∫£"] = get_text_safe(driver, "li.clearfix p")

        chapter_text = get_text_safe(driver, "li.info-row a.colorblue")
        story_data["S·ªë ch∆∞∆°ng"] = re.search(r'\d+', chapter_text).group() if chapter_text != "N/A" and re.search(r'\d+', chapter_text) else "Kh√¥ng t√¨m th·∫•y"
        
        # L·∫•y t√°c gi·∫£
        try:
            author_element = driver.find_element(By.XPATH, "/html/body/div[2]/div[2]/div/div[1]/div[1]/div[1]/div[3]/ul/li[6]/a")
            story_data["T√°c gi·∫£"] = author_element.text.strip()
        except:
            story_data["T√°c gi·∫£"] = "N/A"

    except Exception as e:
        print(f"L·ªói khi l·∫•y th√¥ng tin chi ti·∫øt cho '{story['T√™n truy·ªán']}': {str(e)}")
    finally:
        driver.quit()
    
    return story_data

# H√ÄM 2: L·∫•y b√¨nh lu·∫≠n c·ªßa truy·ªán
def get_story_comments(story):
    """
    L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n c·ªßa truy·ªán
    
    Args:
        story: Dictionary ch·ª©a th√¥ng tin c∆° b·∫£n c·ªßa truy·ªán (t√™n v√† link)
        
    Returns:
        List ch·ª©a c√°c b√¨nh lu·∫≠n c·ªßa truy·ªán
    """
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    driver = webdriver.Chrome(service=Service(CHROMEDRIVER_PATH), options=chrome_options)

    comments_data = []
    
    try:
        print(f"ƒêang l·∫•y b√¨nh lu·∫≠n cho truy·ªán: {story['T√™n truy·ªán']}")
        driver.get(story["Link truy·ªán"])
        time.sleep(2)

        # M·ªü v√† l·∫•y b√¨nh lu·∫≠n
        # H√†m m·ªü t·∫•t c·∫£ b√¨nh lu·∫≠n
        while True:
            try:
                load_more_button = driver.find_element(By.XPATH, "/html/body/div[2]/div[2]/div/div[1]/div[4]/div[2]/div[1]/div[4]/ul/div/button")
                load_more_button.click()
                time.sleep(2)
            except:
                break

        comments = driver.find_elements(By.CSS_SELECTOR, "li.comment_item")
        for comment in comments:
            user = get_text_safe(comment, ".comment-head")
            content = get_text_safe(comment, ".comment-content")
            comments_data.append({
                "T√™n truy·ªán": story["T√™n truy·ªán"], 
                "Ng∆∞·ªùi b√¨nh lu·∫≠n": user, 
                "N·ªôi dung b√¨nh lu·∫≠n": content
            })

    except Exception as e:
        print(f"L·ªói khi l·∫•y b√¨nh lu·∫≠n cho '{story['T√™n truy·ªán']}': {str(e)}")
    finally:
        driver.quit()
    
    return comments_data

# H√†m k·∫øt h·ª£p l·∫•y c·∫£ th√¥ng tin chi ti·∫øt v√† b√¨nh lu·∫≠n
def get_story_details(story):
    # L·∫•y th√¥ng tin chi ti·∫øt
    detailed_story = get_story_qualitative_data(story)
    
    # L·∫•y b√¨nh lu·∫≠n
    comments = get_story_comments(story)
    
    return detailed_story, comments

# Ch·∫°y ch√≠nh
def main():
    try:
        create_tables()
        all_stories = get_all_stories()
        if all_stories:
            print(f"ƒê√£ t√¨m th·∫•y {len(all_stories)} truy·ªán")

            detailed_stories = []
            all_comments = []

            with concurrent.futures.ThreadPoolExecutor(max_workers=2) as executor:
                results = list(executor.map(get_story_details, all_stories))
                
            for details, comments in results:
                detailed_stories.append(details)
                all_comments.extend(comments)
                insert_story(details)
                insert_comments(comments)

            # L∆∞u v√†o file Excel v·ªõi 2 sheet
            with pd.ExcelWriter("manhuavn_data.xlsx", engine="openpyxl") as writer:
                pd.DataFrame(detailed_stories).to_excel(writer, sheet_name="Danh s√°ch truy·ªán", index=False)
                pd.DataFrame(all_comments).to_excel(writer, sheet_name="B√¨nh lu·∫≠n", index=False)
            
            print("‚úÖ ƒê√£ l∆∞u th√¥ng tin truy·ªán v√† b√¨nh lu·∫≠n v√†o c∆° s·ªü d·ªØ li·ªáu SQLite v√† file manhuavn_data.xlsx")

        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y truy·ªán n√†o ƒë·ªÉ l·∫•y chi ti·∫øt!")

    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh ch·∫°y: {str(e)}")

if __name__ == "__main__":
    main()